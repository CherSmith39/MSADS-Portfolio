# Group by neighborhood group and calculate the average price
average_prices = listings_df.groupby('neighbourhood_group_cleansed')['price'].mean()

# Print the average prices
print(average_prices)

# Plotting
plt.figure(figsize=(10, 6))
average_prices.plot(kind='bar')
plt.title('Average Airbnb House Prices by Zipcode')
plt.xlabel('neighbourhood_group_cleansed')
plt.ylabel('Average Price')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#CleanUp Data for Regression Analysis

# Convert 'zipcode' column to numeric, ignoring errors
listings_df['zipcode'] = pd.to_numeric(listings_df['zipcode'], errors='coerce')

# Convert 'bedrooms' column to numeric, ignoring errors
listings_df['bedrooms'] = pd.to_numeric(listings_df['bedrooms'], errors='coerce')

# Convert 'bathrooms' column to numeric, ignoring errors
listings_df['bathrooms'] = pd.to_numeric(listings_df['bathrooms'], errors='coerce')

# Drop rows with missing values
listings_df.dropna(inplace=True)

# Check the data types of all columns
print(listings_df.dtypes)

# Write a program to predict what a house listing price should be in different areas of Seattle.
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Select relevant features (bedrooms, bathrooms, and zipcode) and target variable (price)
X = listings_df[['bedrooms', 'bathrooms', 'zipcode']]
y = listings_df['price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict prices
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Function to predict price based on input features
def predict_price(bedrooms, bathrooms, zipcode):
    input_data = pd.DataFrame([[bedrooms, bathrooms, zipcode]], columns=['bedrooms', 'bathrooms', 'zipcode'])
    price = model.predict(input_data)
    return price[0]

#Collect input from user
bedrooms = float(input("Enter the number of bedrooms in the listing: "))
bathrooms = float(input("Enter the number of bathrooms in the listing: "))
zipcode = float(input("Enter the zipcode of the listing: "))
predicted_price = predict_price(bedrooms, bathrooms, zipcode)
print("Predicted price:", predicted_price)


#Correlation Matrix between host response rate and number of reviews
# Select relevant columns
selected_data = listings_df[['host_response_rate', 'number_of_reviews']]

# Convert 'host_response_rate' to numeric (remove '%' sign)
selected_data['host_response_rate'] = selected_data['host_response_rate'].str.rstrip('%').astype('float')

# Drop rows with missing values
selected_data.dropna(inplace=True)

# Calculate correlation matrix
correlation_matrix = selected_data.corr()

# Print correlation matrix
print(correlation_matrix)